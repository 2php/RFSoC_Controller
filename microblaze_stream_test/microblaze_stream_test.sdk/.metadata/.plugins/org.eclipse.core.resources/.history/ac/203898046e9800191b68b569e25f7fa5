/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <sleep.h>
#include "xgpio.h"
#include "drivers/uart.h"
#include "drivers/rf.h"

#define GPIO_EXAMPLE_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID




/**************************** Type Definitions ******************************/


/***************** Macros (Inline Functions) Definitions ********************/
#ifdef __BAREMETAL__
#define printf xil_printf
#endif
/************************** Function Prototypes *****************************/

static int SelfTestExample(u16 SysMonDeviceId);
static int CompareFabricRate(u32 SetFabricRate, u32 GetFabricRate);
void write_sample_stream(u16* samples, u16 length);


/************************** Variable Definitions ****************************/






/*
 * Write 16 32-bit words as efficiently as possible.
 */
static void inline write_axis(volatile unsigned int *a)
{
	register int a0,  a1,  a2,  a3;
	register int a4,  a5,  a6,  a7;
	register int a8,  a9,  a10, a11;
	register int a12, a13, a14, a15;

	a3  = a[3];  a1  = a[1];  a2  = a[2];  a0  = a[0];
	a7  = a[7];  a5  = a[5];  a6  = a[6];  a4  = a[4];
	a11 = a[11]; a9  = a[9];  a10 = a[10]; a8  = a[8];
	a15 = a[15]; a13 = a[13]; a14 = a[14]; a12 = a[12];

	putfsl(a0,  0); putfsl(a1,  0); putfsl(a2,  0); putfsl(a3,  0);
	putfsl(a4,  0); putfsl(a5,  0); putfsl(a6,  0); putfsl(a7,  0);
	putfsl(a8,  0); putfsl(a9,  0); putfsl(a10, 0); putfsl(a11, 0);
	putfsl(a12, 0); putfsl(a13, 0); putfsl(a14, 0); putfsl(a15, 0);
}

/*
 * Read 16 32-bit words as efficiently as possible.
 */
static void inline read_axis(volatile unsigned int *a)
{
	register int a0,  a1,  a2,  a3;
	register int a4,  a5,  a6,  a7;
	register int a8,  a9,  a10, a11;
	register int a12, a13, a14, a15;

	getfsl(a0,  0); getfsl(a1,  0); getfsl(a2,  0); getfsl(a3,  0);
	getfsl(a4,  0); getfsl(a5,  0); getfsl(a6,  0); getfsl(a7,  0);
	getfsl(a8,  0); getfsl(a9,  0); getfsl(a10, 0); getfsl(a11, 0);
	getfsl(a12, 0); getfsl(a13, 0); getfsl(a14, 0); getfsl(a15, 0);

	a[3]  = a3;  a[1]  = a1;  a[2]  = a2;  a[0]  = a0;
	a[7]  = a7;  a[5]  = a5;  a[6]  = a6;  a[4]  = a4;
	a[11] = a11; a[9]  = a9;  a[10] = a10; a[8]  = a8;
	a[15] = a15; a[13] = a13; a[14] = a14; a[12] = a12;
}



int main()
{
	init_platform();

	uart_init();

	rf_init();

	while(1)
	{
		debug_print("Waiting for 5 characters...");
		u8 rec_chars[5] = {0,0,0,0,0};
		uart_recieve(rec_chars, 5);
		xil_printf("Got %c %c %c %c %c!\n\r", rec_chars[0], rec_chars[1], rec_chars[2], rec_chars[3], rec_chars[4]);

	}

	cleanup_platform();
	return 0;
}



